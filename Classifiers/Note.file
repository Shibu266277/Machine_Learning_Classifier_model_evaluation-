pip install dataprep

     
import pandas as pd
import statsmodels.api as sm
from sklearn.preprocessing import OrdinalEncoder
from dataprep.eda import create_report
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix,accuracy_score
     
df=pd.read_csv("/content/diabetes_prediction_dataset.csv")
df.head()
     
gender	age	hypertension	heart_disease	smoking_history	bmi	HbA1c_level	blood_glucose_level	diabetes
0	Female	80.0	0	1	never	25.19	6.6	140	0
1	Female	54.0	0	0	No Info	27.32	6.6	80	0
2	Male	28.0	0	0	never	27.32	5.7	158	0
3	Female	36.0	0	0	current	23.45	5.0	155	0
4	Male	76.0	1	1	current	20.14	4.8	155	0

encode=OrdinalEncoder()
df.gender=encode.fit_transform(df[["gender"]])

encode1=OrdinalEncoder()
df.smoking_history=encode1.fit_transform(df[["smoking_history"]])
     
x=df.drop("diabetes",axis=1)
y=df["diabetes"]
     

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25)
     

def classifiers(x_train,y_train):

  #Decision Tree Classifier
  from sklearn.tree import DecisionTreeClassifier
  model=DecisionTreeClassifier().fit(x_train,y_train)
  y_pred=model.predict(x_test)
  accuracy = accuracy_score(y_test,y_pred)
  print(f"Decision Tree Classifier accuracy score: {accuracy}\n")

  #Random Forest Classifier
  from sklearn.ensemble import RandomForestClassifier
  model1=RandomForestClassifier().fit(x_train,y_train)
  y_pred1=model1.predict(x_test)
  accuracy1 = accuracy_score(y_test,y_pred1)
  print(f"Random Forest Classifier accuracy score: {accuracy1}\n")

  #AdaBoost Classifier
  from sklearn.ensemble import AdaBoostClassifier
  model2=AdaBoostClassifier().fit(x_train,y_train)
  y_pred2=model2.predict(x_test)
  accuracy2 = accuracy_score(y_test,y_pred2)
  print(f"AdaBoost Classifier accuracy score: {accuracy2}\n")

  #SGD Classifier
  from sklearn.linear_model import SGDClassifier
  model3=SGDClassifier().fit(x_train,y_train)
  y_pred3=model3.predict(x_test)
  accuracy3 = accuracy_score(y_test,y_pred3)
  print(f"SGD Classifier accuracy score: {accuracy3}\n")

  #Support Vector Machines
  from sklearn import svm
  model4=svm.SVC().fit(x_train,y_train)
  y_pred4=model4.predict(x_test)
  accuracy4 = accuracy_score(y_test,y_pred4)
  print(f"Support Vector Machines accuracy score: {accuracy4}\n")

  #Nearest Neighbors
  from sklearn.neighbors import NearestCentroid
  model5=NearestCentroid().fit(x_train,y_train)
  y_pred5=model5.predict(x_test)
  accuracy5 = accuracy_score(y_test,y_pred5)
  print(f"Nearest Neighbors accuracy score: {accuracy5}\n")

  #KNeighbors Classifier
  from sklearn.neighbors import KNeighborsClassifier
  model6=KNeighborsClassifier().fit(x_train,y_train)
  y_pred6=model6.predict(x_test)
  accuracy6 = accuracy_score(y_test,y_pred6)
  print(f"KNeighbors Classifier accuracy score: {accuracy6}\n")

  #Neural network models
  from sklearn.neural_network import MLPClassifier
  model7=MLPClassifier().fit(x_train,y_train)
  y_pred7=model7.predict(x_test)
  accuracy7 = accuracy_score(y_test,y_pred7)
  print(f"Neural network models accuracy score: {accuracy7}\n")

  #Gradient Boosting Classifier
  from sklearn.ensemble import GradientBoostingClassifier
  model8=GradientBoostingClassifier().fit(x_train,y_train)
  y_pred8=model8.predict(x_test)
  accuracy8 = accuracy_score(y_test,y_pred8)
  print(f"Gradient Boosting Classifier accuracy score: {accuracy8}\n")

  #Naive Bayes
  from sklearn.naive_bayes import GaussianNB
  model9=GaussianNB().fit(x_train,y_train)
  y_pred9=model9.predict(x_test)
  accuracy9 = accuracy_score(y_test,y_pred9)
  print(f"Naive Bayes accuracy score: {accuracy9}\n")


     

classifiers(x_train,y_train)
     
Decision Tree Classifier accuracy score: 0.95452

Random Forest Classifier accuracy score: 0.972

AdaBoost Classifier accuracy score: 0.97316

SGD Classifier accuracy score: 0.94892

Support Vector Machines accuracy score: 0.94836

Nearest Neighbors accuracy score: 0.85336

KNeighbors Classifier accuracy score: 0.95368

Neural network models accuracy score: 0.96364

Gradient Boosting Classifier accuracy score: 0.97344

Naive Bayes accuracy score: 0.90444


#Multiclass and multioutput
from sklearn.multiclass import OutputCodeClassifier
from sklearn.svm import LinearSVC
model9=OutputCodeClassifier(LinearSVC()).fit(x_train,y_train)
y_pred9=model9.predict(x_test)
accuracy9 = accuracy_score(y_test,y_pred9)
print(f"Multiclass and multioutput algorithms accuracy score: {accuracy9}")
     

#Gaussian Process Classifier
from sklearn.gaussian_process import GaussianProcessClassifier
model10=GaussianProcessClassifier().fit(x_train,y_train)
y_pred10=model10.predict(x_test)
accuracy10 = accuracy_score(y_test,y_pred10)
print(f"Gaussian Process Classifier accuracy score: {accuracy10}")
     
